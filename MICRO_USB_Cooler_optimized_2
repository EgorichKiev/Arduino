#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <EEPROM.h>


//Arduino - Oled
// D2     - D1
// D3     - D0
// D5     - Res

// D15    - EncA
// D16    - EncB
// D4     - EncButton
// A0     - TMP36

// D7     - cold 
// D8     - hot
// D9     - CoolerPWM
// D14    - WorkMode of cooler - charger or cooler 
DDRB &= ~(1 << 2);    //setup D16 as input - encB
DDRB &= ~(1 << 1);    //setup D15 as input - encA
DDRB &= ~(1 << 3);    //setup D14 as input - modeIn
DDRD &= ~(1 << 4);    //setup D4 as input - encButton

DDRE |= (1 << 6);     //setup D7 as output - cold (blue)
DDRB |= (1 << 4);     //setup D8 as output - hot (red)
DDRB |= (1 << 5);     //setup D9 as output - CoolerPWM
DDRB |= (1 << 6);     //setup D10 as output - soundPin - beeper

PORTB |= (1 << 4);    // D8 HIGH - hot
PORTB &= ~(1 << 4);   // D8 LOW   - hot
PORTB |= (1 << 5);    // D9 HIGH - CoolerPWM
PORTB &= ~(1 << 5);   // D9 LOW   - CoolerPWM
PORTE |= (1 << 6);    // D7 HIGH - cold
PORTE &= ~(1 << 6);   // D7 LOW   - cold
PORTB |= (1 << 6);    // D10 HIGH - soundPin - beeper
PORTB &= ~(1 << 6);   // D10 LOW   - soundPin - beeper

(PINB & (1 << 1)) == 0;   // is D15 LOW?  - encA
(PINB & (1 << 2)) == 0;   // is D16 LOW?  - encB
(PINB & (1 << 3)) == 0;   // is D14 LOW?  - modeIn
(PIND & (1 << 4)) == 0;   // is D4 LOW? - encButton
*/

#define OLED_RESET 5 //reset pin from oled to arduino, other - (2,3)
Adafruit_SSD1306 display(OLED_RESET);
/*
#define button 4   // кнопка энкодера
#define cool 7    //выход состояния охлаждения - подсветка при холодном напитке
#define hot 8    //выход - вкл при горячем напитке 
#define PWMout 9  //выход регулирования вращения кулера

#define encA 15 //ввод энкодера
#define encB 16 //ввод энкодера
#define modeIn 14 //вход индикатора режима
*/
bool setMenu = 0;

float set = 50.0;
/*
int8_t memoRy = 0;
int8_t memoRy1 = 1;
int8_t memoRy2 = 2;
int8_t memoRy3 = 3;
int8_t memoRy4 = 4;
*/
float temperature = 0;
float voltage = 0;
float percent = 0;
uint32_t temp;
bool tempMeasure = 0;

uint32_t Enc;
uint8_t Enc1;
bool plus;
bool minus;

uint8_t coolState = 0;
uint32_t tempRise = 0;
float tempRise2 = 0;
uint32_t tempRise3 = 0;

uint32_t pageCoolSt;
uint32_t pageCoolSt2;
uint32_t pageCoolSt3;
bool pageCool2;
bool pageCool3;

bool cooling = 0;

uint32_t coolBegin = 0;
bool coolStop = 0;
bool pageCool = 0; 

int8_t page = 0;                                                                    //page switch function

uint32_t stateOn = 0;
uint32_t stateOff = 0;
uint32_t stateBut1 = 0;
bool a = 0;
bool c = 0;

int8_t times;
uint32_t z;
uint32_t z2;
bool z3 = 0;
bool z4 = 0;  

bool lang = 0;
bool led = 0;
bool noise = 0;
bool alarm = 0;
//bool coolOn = 0;

int16_t w = 0;
int16_t v = 0;
bool d = 0;

//Arduino logo, created in with paint in black-white, sized in paint.net, converted in lcdassistant - gorizontal
//orientation and maximum size 128x64 - Arduino
const unsigned char PROGMEM Arduino [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0xFF,
0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xFE, 0x07, 0xFF, 0xC0, 0x01, 0xFF, 0xF0, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xE0, 0x00, 0x7F, 0xE0, 0x03, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80,
0x00, 0x1F, 0xF0, 0x07, 0xFE, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x0F,
0xF8, 0x0F, 0xF8, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x07, 0xFC, 0x0F,
0xF0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE0, 0x00,
0x00, 0x0F, 0xE0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x01, 0xFE, 0x3F, 0xC0, 0x00, 0x00, 0x0F,
0xE0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x80, 0x00, 0x00, 0x07, 0xF0, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07,
0xF0, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x1F, 0xFE, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00,
0x1F, 0xFC, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xF8,
0x00, 0x7F, 0xF0, 0x01, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x1F, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x7F,
0xF0, 0x01, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x1F, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x7F, 0xF0, 0x01,
0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x7F, 0xF0, 0x01, 0xF8, 0x00,
0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x07, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x07,
0xE0, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x3F, 0xFE, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00,
0x3F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0xFF,
0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x80, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0xFE, 0x3F, 0xC0, 0x00, 0x00, 0x0F,
0xE0, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x01, 0xFC, 0x1F, 0xE0, 0x00, 0x00, 0x0F, 0xE0, 0x00,
0x00, 0x01, 0xFE, 0x00, 0x00, 0x03, 0xFC, 0x0F, 0xF0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xF8, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x80,
0x00, 0x1F, 0xF0, 0x07, 0xFC, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x7F,
0xE0, 0x03, 0xFF, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x03, 0xFF, 0xC0, 0x01,
0xFF, 0xE0, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF,
0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x38, 0x1F, 0xC0, 0xFC, 0x0C, 0x0C, 0x3F, 0xE3, 0x83, 0x07, 0xC0, 0x00, 0x00, 0x00,
0x78, 0x1F, 0xE0, 0xFF, 0x0C, 0x0C, 0x3F, 0xE3, 0x83, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x6C, 0x18,
0x30, 0xC1, 0x8C, 0x0C, 0x06, 0x03, 0xC3, 0x18, 0x30, 0x00, 0x00, 0x00, 0x4C, 0x18, 0x30, 0xC1,
0xCC, 0x0C, 0x06, 0x03, 0xC3, 0x18, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x18, 0x30, 0xC0, 0xCC, 0x0C,
0x06, 0x03, 0x63, 0x30, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x18, 0x30, 0xC0, 0xCC, 0x0C, 0x06, 0x03,
0x23, 0x30, 0x18, 0x00, 0x00, 0x00, 0x86, 0x1F, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x33, 0x30,
0x18, 0x00, 0x00, 0x01, 0x86, 0x1F, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x13, 0x30, 0x18, 0x00,
0x00, 0x01, 0x86, 0x18, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x1B, 0x30, 0x18, 0x00, 0x00, 0x01,
0xFF, 0x18, 0x60, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x1B, 0x38, 0x18, 0x00, 0x00, 0x03, 0xFF, 0x18,
0x30, 0xC1, 0x86, 0x0C, 0x06, 0x03, 0x0F, 0x18, 0x18, 0x00, 0x00, 0x03, 0x03, 0x18, 0x30, 0xC3,
0x06, 0x0C, 0x06, 0x03, 0x0F, 0x18, 0x30, 0x00, 0x00, 0x03, 0x01, 0x98, 0x30, 0xFE, 0x03, 0xF8,
0x3F, 0xE3, 0x07, 0x0F, 0xE0, 0x00, 0x00, 0x02, 0x01, 0x98, 0x18, 0xF0, 0x01, 0xE0, 0x3F, 0xE3,
0x07, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x17, 0x16, 0x00, 0xD5, 0x25, 0x29, 0x00, 0xE8, 0x3C, 0x43, 0x00, 0xF0, 0x58, 0x60, 0x00
};

//Fonts from Win paint - Stencil (1) + Agency FB (2) - Smart USB Cooler
const unsigned char PROGMEM Cooler [] = {             
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x43,
0xF8, 0x1F, 0xC0, 0x0F, 0x80, 0x7F, 0x38, 0x07, 0x3F, 0x38, 0x00, 0x00, 0x01, 0x83, 0xC1, 0xF8,
0x1F, 0x80, 0x1F, 0x80, 0x3F, 0x3E, 0x07, 0x3F, 0x18, 0x00, 0x00, 0x03, 0x81, 0xC0, 0xFC, 0x1F,
0x80, 0x1F, 0xC0, 0x3F, 0x1F, 0x06, 0x3F, 0x18, 0x00, 0x00, 0x07, 0x80, 0xC0, 0xFC, 0x1F, 0x80,
0x0F, 0xC0, 0x3F, 0x1F, 0x86, 0x3F, 0x18, 0x00, 0x00, 0x07, 0x80, 0x40, 0xFE, 0x1F, 0x80, 0x0F,
0xC0, 0x3F, 0x1F, 0x86, 0x3F, 0x08, 0x00, 0x00, 0x0F, 0xC0, 0x40, 0x7E, 0x1F, 0x80, 0x0F, 0xC0,
0x3F, 0x1F, 0x84, 0x3F, 0x08, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x7E, 0x1F, 0x80, 0x2F, 0xC0, 0x3F,
0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x7F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x1F,
0x00, 0x3F, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x3F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x1E, 0x00,
0x3F, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x3F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x3C, 0x00, 0x3F,
0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0xBF, 0x1F, 0x80, 0xC7, 0xE0, 0x3F, 0x3C, 0x00, 0x3F, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xC0, 0x9F, 0x1F, 0x80, 0x87, 0xF0, 0x3F, 0x1F, 0x00, 0x3F, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xC0, 0x9F, 0x1F, 0x80, 0x87, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00,
0x0C, 0x0F, 0xC0, 0x8F, 0x1F, 0x80, 0xBF, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0C,
0x07, 0xC0, 0x8E, 0x1F, 0x80, 0x03, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x03,
0xC0, 0x8E, 0x1F, 0x81, 0x03, 0xF8, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x80,
0x8E, 0x1F, 0x81, 0x01, 0xF8, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x81, 0xC4,
0x1F, 0x83, 0x01, 0xF8, 0x3F, 0x1F, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x8E, 0x03, 0xE4, 0x7F,
0xC7, 0x83, 0xFC, 0x7F, 0xCF, 0xC0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07,
0xF8, 0x3F, 0xE0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0xFC,
0x3F, 0xF0, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0xFC, 0x3F,
0xF0, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30,
0x03, 0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03,
0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03, 0x03,
0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03, 0x03, 0x80,
0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x06, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00,
0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x30, 0x60, 0x03, 0x00, 0x0F, 0xF8, 0x7F, 0x87,
0x1F, 0xF0, 0xDF, 0x03, 0x03, 0x01, 0x80, 0x3F, 0xC0, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18,
0x30, 0xF7, 0x03, 0x03, 0x00, 0xE0, 0x3F, 0xC0, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30,
0xC7, 0x03, 0x03, 0x00, 0x70, 0x30, 0x60, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC7,
0x03, 0x03, 0x00, 0x38, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC7, 0x03,
0x03, 0x00, 0x0C, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0x03,
0x00, 0x0C, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x1F, 0xE0, 0xC0, 0x03, 0x03, 0x0C,
0x0C, 0x30, 0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x00, 0xC0, 0x03, 0x03, 0x0C, 0x0C,
0x30, 0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x00, 0xC0, 0x03, 0x03, 0x0C, 0x0C, 0x30,
0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30,
0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0xFF, 0x0F, 0xFC, 0x3F, 0xF0, 0x03,
0xFF, 0x8F, 0xF8, 0x7F, 0xC7, 0x1F, 0xF0, 0xC0, 0x03, 0xFF, 0x0F, 0xFC, 0x3F, 0xF0, 0x03, 0xFF,
0x0F, 0xF8, 0x7F, 0x87, 0x1F, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// font - agency FB - Be cool... Stay cool
const unsigned char PROGMEM Yay [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x18, 0x3F, 0xC0, 0x1F, 0xE1, 0xFE, 0x1F, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xF0, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xF0, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x08, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0xC0, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x3F, 0xC0, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x8C, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x3F, 0xC0, 0x1F, 0xE1, 0xFE, 0x1F, 0xE3, 0x8C, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x02, 0x00,
0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x03, 0x00,
0x00, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x01, 0x00,
0x00, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x01, 0x80,
0x00, 0x1C, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0x01, 0x80,
0x00, 0x1C, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0x00, 0x80,
0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x07, 0x00, 0xF8, 0x7F, 0x18, 0x60, 0x0F, 0xF0, 0xFE, 0x1F, 0xE1, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x01, 0x80, 0x60, 0xE3, 0x88, 0x60, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xC0,
0x00, 0x00, 0xC0, 0x60, 0xE3, 0x88, 0x60, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xC0,
0x00, 0x00, 0x60, 0x60, 0x03, 0x8C, 0x40, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xE0,
0x00, 0x00, 0x30, 0x60, 0x03, 0x8C, 0xC0, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xE0,
0x00, 0x00, 0x18, 0x60, 0x7F, 0x84, 0xC0, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x87, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1F, 0xF8, 0x60, 0xC3, 0x83, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x8E, 0x00, 0xC1, 0x80,
0x00, 0x0F, 0xF8, 0x78, 0xFF, 0x83, 0x00, 0x0F, 0xF0, 0xFE, 0x1F, 0xE1, 0x8E, 0x00, 0xC1, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x32)
  display.clearDisplay();
  pinMode(A0, INPUT); // Use A0 to measure the temperature sensor's output
  
  DDRB &= ~(1 << 2);    //setup D16 as input - encB
  DDRB &= ~(1 << 1);    //setup D15 as input - encA
  DDRB &= ~(1 << 3);    //setup D14 as input - modeIn
  DDRD &= ~(1 << 4);    //setup D4 as input - encButton
  DDRE |= (1 << 6);     //setup D7 as output - cold (blue)
  DDRB |= (1 << 4);     //setup D8 as output - hot (red)
  DDRB |= (1 << 5);     //setup D9 as output - CoolerPWM
  DDRB |= (1 << 6);     //setup D10 as output - soundPin - beeper
}

void loop() {
  
while (1) {
w = uint32_t(millis()) / 700;

voltageChargeMeasure ();
temperatureCycle ();

if (!(PINB & (1 << 3))) {                                                 // глобальный режим работы-зарядки - по пину - или зарядка или повербанк

  if ((w == 0) || (w < 7)) { 
  page = w;
  }

  switch (coolState) {                    //проверка - начальная точка включения - поставили ли на охл что-то горячее - если да - предварительно вкл охладитель до
    case 0: {
      tempRise = millis ();                       //достижения условия - заданная темп < измеренной и точной необх вкл вентилятора
      tempRise2 = temperature;
      coolState = 1;
      } break;
    
    case 1: {
      if ((millis () - tempRise) >= 12000)  {              //крутая температуры - за 15с более 5 градусов - значит что-то горячее и нужно вкл охл
        if ((temperature - tempRise2) >= 5.0) {
          tempRise3 = millis ();
          onOffOutput (1);
          coolState = 2;
          }
        }
      } break;
    case 2: {
      if ((millis () - tempRise3) >= 30000) {               //если через 30 сек не достигнуто условие - t уст.< t изм. то выкл вентилятор - фальшстарт
        EEPROM.get(1, set);
        if (temperature < set) {
          onOffOutput (0);
          coolState = 3;
          }
        }  
      } break;
  }  
      
  if (!setMenu) {                                  
    if (!(PIND & (1 << 4))) {
      stateOn = (millis () - stateOff);
      switch (stateOn) {
         case 0 ... 1900: {
              (cooling) ? page : page = 7;            //**
              Enc = millis ();     
              Enc1 = 1;   
              }
              break;
         case 2000 ... 3000: {
              setMenu = 1; 
              page = 11;                            //**
              c = 1;  
              }
              break;
         }
       } else { stateOff = millis (); }
              
    if (!coolStop) {    //глобальное уловие - если не имело место в процессе слишком долгая работа кулера - то возможно продолжение программы в норм.режиме
      if (cooling) { 
        EEPROM.get(1, set);    
        if (temperature < (set - 3.0)) {//при темп. ниже установленной - выкл охл
           onOffOutput (0);
           cooling = 0;
           alarmOut();
           }
      } else {
        if (!(PINB & (1 << 1)) && !(PINB & (1 << 2))) {   //если покрутить энкодер - зайдем в настройки
           page = 8;                                         //**
           Enc = millis (); 
           Enc1 = 1;
           }
         if (((millis () - Enc) >= 3000) && Enc1) {      //3 сек - если нет активности - не нажимать кнопку или крутить энкодер - возвращение
           page = 6;                                          //**
           Enc1 = 0;
           }
         EEPROM.get(1, set);
         if (temperature >= set) {
           page = 9;                                         //**
           onOffOutput (1);
           cooling = 1;
           }  
      }
    }  
    
  } else {
    if (page <= 14 && !a && !c) {     //задержка 800мс при нажатии кнопок в меню - чтобы мгновенно в конец меню не улетать!     //**
       stateBut1 = millis ();
          if (!(PIND & (1 << 4))) {
            page++;
            a = 1; 
            }
       }
     ((PIND & (1 << 4))) ? c = 0 : c ;
     (millis () - stateBut1) > 700 ? a = 0 : a = 1 ;   // конец задержки нажатии кнопок в меню настройки
  }                                                                               //end of algoritm - set menu 
  
  EEPROM.get(1, set);
  if (temperature < set) {                          //можно попробовать упростить - привязать отметку с миллис к включению охлаждения - там тоже через флаг!
    coolBegin = millis ();  
    }
    
  if (temperature >= set) {
    onOffOutput (1);
    }
  
  if (PINB & (1 << 5)) {                                    //если вкл. вывод пвм в единицу - т.е. охлаждение идет и достигнуто условие выкл охлаждения - выкл. вентилятор
    if (temperature < (set - 3.0)) {
      onOffOutput (0);
      sound();
      }
    }
  
  if ((millis () - coolBegin) >= 90000) {     //проверка условия слишком длительной работы кулера - если включен больше 1,5 мин - стоп и ошибка
    coolStop = 1;
    page = 10;                                            //**
    } 
     
} else {

if ((w == 0) || (w < 6)) { 
page = w;
v = (w + 4);
}

if ((v == w) && (!d)) {
(!setMenu) ? page = 5 : page ;
v = (w + 4);
d = 1;
}
else if ((v == w) && (d)) {
(!setMenu) ? page = 16 : page ; 
v = (w + 4); 
d = 0;
}

if (!setMenu) {                                  
    if (!(PIND & (1 << 4))) {
      stateOn = (millis () - stateOff);
      switch (stateOn) {
         case 2000 ... 3000: {
              setMenu = 1; 
              page = 11;                            //**
              c = 1;
              }
              break;
         }
       } else { stateOff = millis (); }
    } else {
      if (page <= 14 && !a && !c) {     //задержка 800мс при нажатии кнопок в меню - чтобы мгновенно в конец меню не улетать!     //**
        stateBut1 = millis ();
          if (!(PIND & (1 << 4))) {
            page++;
            a = 1; 
            }
       }
       ((PIND & (1 << 4))) ? c = 0 : c ;
       (millis () - stateBut1) > 700 ? a = 0 : a = 1 ;   // конец задержки нажатии кнопок в меню настройки
    } 
}

switch (page) {
  case 1: {
    display.clearDisplay();
    display.drawBitmap(8, 0, Arduino, 112, 64, WHITE); //work only on this resolution, do not change
    display.display();
    } break;
    
  case 2: {
    display.clearDisplay ();
    display.drawBitmap(5, 0, Cooler, 120, 64, WHITE);  //work only on this resolution, do not change
    display.display();      
    } break;
    
  case 3: {
    display.clearDisplay ();
    display.drawBitmap(5, 7, Yay, 128, 60, WHITE);   //work only on this resolution, do not change
    display.display();  
    } break;
    
  case 4: {
    display.clearDisplay(); 
    printDisplay (0,0,2, F("BATTERY:"));
    display.setCursor(11,27);
    display.setTextSize(3); 
    display.setTextColor(WHITE);
    display.print(voltage,2); 
    display.print(F("V"));
    display.display();
    } break;
    
  case 5: {
    display.clearDisplay(); 
    printDisplay (17,0,2, F("CHARGE:"));
    display.setCursor(11,30);
    display.setTextSize(3); 
    display.setTextColor(WHITE);
    display.print(percent,1); 
    display.print(F("%"));
    display.display();
    } break;
    
  case 6: {                                                               //main work page in cooler mode
    display.clearDisplay(); 
    printDisplay (0,0,2, F("Current t:"));
    display.println((char)247);
    display.setCursor(11,27);
    display.setTextColor(WHITE);
    display.setTextSize(3); 
    display.print(temperature,1);
    display.print((char)247);
    display.println(F("C"));
    display.display();  
    } break;
    
  case 7: {
    showSetUpTemp();  
    } break;
   
  case 8: {
    Encoder ();
    if (plus && (set <= 69.5)) {
      set += 0.5;
      EEPROM.put(1, set);
      showSetUpTemp ();
      }
    else if (minus && (set >= 20.5)) {
      set -= 0.5;
      EEPROM.put(1, set);
      showSetUpTemp ();
      }  
    } break;
    
  case 9: {
    switchPage ();
    if (times == 1) {
      display.clearDisplay ();
      printDisplay (0,0,2, F("Cooling..."));
      printDisplay (0,30,2, F("Please"));
      printDisplay (0,45,2, F("    wait"));
      display.display();  
      } 
    if (times == 3){
      display.clearDisplay();
      printDisplay (0,0,2, F("Current t"));
      display.println((char)247);
      display.setCursor(11,27);
      display.setTextSize(3); 
      display.setTextColor(WHITE);
      display.print(temperature,1); // Print temperature with single decimal
      display.print((char)247);
      display.println(F("C"));
      display.display();
      }     
    } break;
    
  case 10: {
    switchPage ();
    if (times == 1) {
      z4 = 1;  
      }
    if (times == 1 && z4) {
      if (!z3) { 
        display.clearDisplay ();
        printDisplay (0,0,2, F("ERROR..."));
        printDisplay (0,30,2, F("Please"));
        printDisplay (0,45,2, F("    wait"));
        display.display();    
        } else {
        page = 6;                                             //**
        coolStop = 0;
        onOffOutput (0);
        z3 = 0;
        z4 = 0; 
        set = 50.0;
        EEPROM.put(1, set);
        cooling = 0;
        }
      }
    if (times == 3 && z4){
      display.clearDisplay(); 
      printDisplay (0,0,2, F("Reset      current"));
      printDisplay (0,33,2, F("setUp       settings"));
      display.display();
      z3 = 1;   
      }      
    } break;
    
  case 11: {
    Encoder (); 
    display.clearDisplay ();
    printDisplay (0,0,2, F("Language:"));
    display.setCursor(0,32);
    display.setTextColor(WHITE);
    display.setTextSize(2);
    EEPROM.get(2, lang);
    (lang) ? display.print("ENG") : display.print("NOT Instal") ;
    display.display();
    
    if (plus && !lang) {
      lang = 1;
      EEPROM.put(2, lang);
      }
    if (minus && lang) {
      lang = 0;
      EEPROM.put(2, lang);
      }  
    } break;
    
  case 12: {
    Encoder (); 
    display.clearDisplay ();
    printDisplay (0,0,2, F("LED Light:"));
    display.setCursor(11,32);
    display.setTextColor(WHITE);
    display.setTextSize(2);
    EEPROM.get(3, led);
    (led) ? display.print("LEDs ON") : display.print("LEDs OFF") ;
    display.display();
    
    if (plus && !led) {
      led = 1;
      EEPROM.put(3, led);
      }
    if (minus && led) {
      led = 0;
      EEPROM.put(3, led);
      }    
    } break;
    
  case 13: {
    Encoder ();  
    display.clearDisplay ();
    printDisplay (0,0,2, F("Loudness"));
    display.setCursor(11,32);
    display.setTextColor(WHITE);
    display.setTextSize(2);
    EEPROM.get(4, noise);
    (noise) ? display.print("Silent") : display.print("Noisier") ;
    display.display();
    
    if (plus && !noise) {
      noise = 1;
      EEPROM.put(4, noise);
      }
    if (minus && noise) {
      noise = 0;
      EEPROM.put(4, noise);
      }    
    } break;
    
  case 14: {
    Encoder ();  
    display.clearDisplay ();
    printDisplay (10,0,2, F("Sounds:"));
    display.setCursor(11,32);
    display.setTextColor(WHITE);
    display.setTextSize(2);
    EEPROM.get(5, alarm);
    (alarm) ? display.print("Alarm OFF") : display.print("Alarm ON") ;
    display.display();
    
    if (plus && !alarm) {
      alarm = 1;
      EEPROM.put(5, alarm);
      }
    if (minus && alarm) {
      alarm = 0;
      EEPROM.put(5, alarm);
      }    
    } break;
    
  case 15: {
    page = 6;                                                   //**
    setMenu = 0;       
    } break;
    
  case 16: {
    display.clearDisplay(); 
    printDisplay (10,10,2, F("CHARGING"));
    printDisplay (0,33,2, F("   Your    gadget"));
    display.display();
    } break;
    } 
  }                                                            //end of switch (page)
}                                                               //конец цикла loop
  
void onOffOutput (bool coolOn) {
  EEPROM.get(3, led);
  if (coolOn) {
    if (led) {
      PORTB |= (1 << 4);    // D8 HIGH - hot
    } else {
      PORTB &= ~(1 << 4);   // D8 LOW   - hot  
      }
      PORTB |= (1 << 5);    // D9 HIGH - CoolerPWM
  } else {
    if (led) {
      PORTE |= (1 << 6);    // D7 HIGH - cold 
    } else {
      PORTE &= ~(1 << 6);   // D7 LOW   - cold  
      }
      PORTB &= ~(1 << 5);   // D9 LOW   - CoolerPWM
   }
}

void voltageChargeMeasure () {
  ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);             // Read 1.1V reference against AVcc
                                                                                  // set the reference to Vcc and the measurement to the internal 1.1V reference
  delay(2);                                                                       // Wait for Vref to settle
  ADCSRA |= _BV(ADSC);                                                            // Start conversion
  while (bit_is_set(ADCSRA,ADSC));                                                // measuring
  
  uint8_t low  = ADCL;                                                            // must read ADCL first - it then locks ADCH  
  uint8_t high = ADCH;                                                            // unlocks both
  int16_t voltCalc = (high<<8) | low;

  voltCalc = 1125300L / voltCalc;                                                 // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
  voltage = float(voltCalc)/1000;

  switch (voltCalc) {
    case 2200 ... 3400 : {
    percent = 0.0;  
    } break;
    
    case 3410 ... 3530 : {
    percent = map (voltCalc, 3410, 3530, 1, 5);
    } break;
    
    case 3531 ... 3580 : {
    percent = map (voltCalc, 3531, 3580, 5.1, 10); 
    } break;
    
    case 3581 ... 3620 : {
    percent = map (voltCalc, 3581, 3.620, 10.1, 20); 
    } break;
    
    case 3621 ... 3680 : {
    percent = map (voltCalc, 3621, 3680, 20.1, 30); 
    } break;
    
    case 3681 ... 3710 : {
    percent = map (voltCalc, 3681, 3710, 30.1, 40); 
    } break;
    
    case 3711 ... 3750 : {
    percent = map (voltCalc, 3711, 3750, 40.1, 50); 
    } break;
    
    case 3751 ... 3850 : {
    percent = map (voltCalc, 3751, 3850, 50.1, 60); 
    } break;
    
    case 3851 ... 3950 : {
    percent = map (voltCalc, 3851, 3950, 60.1, 70); 
    } break;
    
    case 3951 ... 4050 : {
    percent = map (voltCalc, 3951, 4050, 70.1, 80); 
    } break;
    
    case 4051 ... 4150 : {
    percent = map (voltCalc, 4051, 4150, 80.1, 90); 
    } break;
    
    case 4151 ... 4200 : {
    percent = map (voltCalc, 4151, 4020, 90.1, 100); 
    } break;
  }
  (voltage > 4.2) ? percent = 100.0 : percent ;                                     //если подключена через юсб - уровень заряда не нужен и равен 100%
}

void temperatureCycle () {
  uint32_t readings = 0;                                                            //variables for temperature measurement
  uint8_t measurements = 10;
     
  for (uint8_t i = 0; i < measurements; i++ )  {                                     // Make multiple measurements to take average from, avoiding large fluctuations
  readings += analogRead(A0);                                                        // Read the temperature sensor's output
  }

  if (!tempMeasure) {                                                                //задержка при отображении температуры на табло вместо функции delay, чтобы на табло цифры не прыгали
    temp = millis ();
    temperature = (((((readings/measurements) * 5.0)/1024) - 0.5) * 100);            // Convert the average voltage output to degrees Celsius
    tempMeasure = 1;
    } 
        
  if ((millis () - temp) >= 800) {
    tempMeasure = 0;
    }    
  (voltage > 4.2) ? temperature : temperature -= 20 ;                                 //если подключен к юсб во время отладки - коррекция температуры  
}

void showSetUpTemp () {
  EEPROM.get(1, set);
  display.clearDisplay(); 
  printDisplay (0,0,2, F("SetUp t"));
  display.print((char)247);
  display.setCursor(11,27); 
  display.setTextColor(WHITE); 
  display.setTextSize(3); 
  display.print(set,1);
  display.print((char)247);
  display.print(F("C"));
  display.display();
}

void printDisplay (int8_t x, int8_t y, int8_t TS, const __FlashStringHelper *Text) {
  display.setTextColor(WHITE);
  display.setCursor(x,y);                                                                     // Set the cursor at the beginning of the display
  display.setTextSize(TS);                                                                    // Set the text size
  display.print(Text);  
}

void Encoder () {
  bool comb1;
  bool comb2;
  plus = 0;
  minus = 0;

  if (!(PINB & (1 << 1))) {
    if (!(PINB & (1 << 1)) && (PINB & (1 << 2)) && !comb1){
      comb1 = 1;
      plus = 1; 
      }
    if (!(PINB & (1 << 1)) && !(PINB & (1 << 2)) && !comb2) {
      comb2 = 1;
      minus = 1; 
      }
    }
  
  if ((PINB & (1 << 1)) && (PINB & (1 << 2))) {
    comb1 = 0;
    comb2 = 0;
    }
}

void switchPage () {
  switch (times) {
    case 0: {
      z = millis ();
      times = 1;  
    } break;
    
    case 1: {
    if ((millis () - z) >= 1500 ) {  
      z2 = 0;
      times = 2;  
      }  
    } break;
    
    case 2: {
      z2 = millis ();
      z = 0;
      times = 3;   
    } break;
    
    case 3: {
      if ((millis () - z2) >= 1500 ) {  
      times = 4;  
      }  
    } break;
    
    case 4: {
      times = 0;
      z = 0;
      z2 = 0;
    } break;
  }
}


void sound () {    
float noteFrequency [16] = {3520, 3135.96, 2637.02, 2093, 2349.32, 3951.07, 2793.83, 4186.01, 3520, 3135.96, 2637.02, 2093, 2349.32, 3951.07, 2793.83, 4186.01};
for (int i = 0; i < 16; i++){
  int j;
  float microsecondsPerWave = 1000000/noteFrequency [i];                    // Convert the frequency to microseconds
  float millisecondsPerCycle = 1000/(microsecondsPerWave * 2);          // Calculate how many HIGH/LOW cycles there are per millisecond
  float loopTime = 100 * millisecondsPerCycle;                          // Multiply noteDuration * number or cycles per millisecond
                                                                      // Play the note for the calculated loopTime.
  for ( j = 0; j < loopTime; j++ ) {   
    PORTB |= (1 << 6); 
    delayMicroseconds(microsecondsPerWave); 
    PORTB &= ~(1 << 6); 
    delayMicroseconds(microsecondsPerWave); 
    } 
  } 
}  
