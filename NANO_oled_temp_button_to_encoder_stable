#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

int OLED_RESET = 4; //reset pin from oled to arduino
Adafruit_SSD1306 display(OLED_RESET);

int setMenu = 0;

int button = 3;   // кнопка энкодера
int cool = 8;    //выход состояния охлаждения - подсветка при холодном напитке
int hot = 9;    //выход - вкл при горячем напитке 
int PWMout = 5;  //выход регулирования вращения кулера

int encA = 6; //вывод энкодера
int encB = 7; //вывод энкодера

int comb1 = 0;
int comb2 = 0;
int cond = 0;
float set = 50.0;
unsigned long state1 = 0;
unsigned long state2 = 0;
unsigned long Enc = 0;

int readings = 0; //variables for temperature measurement
float temperature = 0;
int measurements = 10;
int b = 0;
unsigned long temp = 0;
int coolState = 0;

int pageCool = 0;                         //три аргумента для таймера переключения страниц при охл.
unsigned long pageCoolSt = 0;
unsigned long pageCoolSt2 = 0;

unsigned long coolBegin = 0;
int coolStop = 0;

int page = 0; //page switch function
int c = 0;

unsigned long stateOn = 0;
unsigned long stateOff = 0;
unsigned long stateBut1 = 0;
int a = 0;

//Arduino logo, created in with paint in black-white, sized in paint.net, converted in lcdassistant - gorizontal
//orientation and maximum size 128x64 - Arduino
const unsigned char PROGMEM Arduino [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0xFF,
0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xFE, 0x07, 0xFF, 0xC0, 0x01, 0xFF, 0xF0, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xE0, 0x00, 0x7F, 0xE0, 0x03, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80,
0x00, 0x1F, 0xF0, 0x07, 0xFE, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x0F,
0xF8, 0x0F, 0xF8, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x07, 0xFC, 0x0F,
0xF0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE0, 0x00,
0x00, 0x0F, 0xE0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x01, 0xFE, 0x3F, 0xC0, 0x00, 0x00, 0x0F,
0xE0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x80, 0x00, 0x00, 0x07, 0xF0, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07,
0xF0, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x1F, 0xFE, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00,
0x1F, 0xFC, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xF8,
0x00, 0x7F, 0xF0, 0x01, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x1F, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x7F,
0xF0, 0x01, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x1F, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x7F, 0xF0, 0x01,
0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x7F, 0xF0, 0x01, 0xF8, 0x00,
0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x07, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x07,
0xE0, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x3F, 0xFE, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00,
0x3F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0xFF,
0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x80, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0xFE, 0x3F, 0xC0, 0x00, 0x00, 0x0F,
0xE0, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x01, 0xFC, 0x1F, 0xE0, 0x00, 0x00, 0x0F, 0xE0, 0x00,
0x00, 0x01, 0xFE, 0x00, 0x00, 0x03, 0xFC, 0x0F, 0xF0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xF8, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x80,
0x00, 0x1F, 0xF0, 0x07, 0xFC, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x7F,
0xE0, 0x03, 0xFF, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x03, 0xFF, 0xC0, 0x01,
0xFF, 0xE0, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF,
0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x38, 0x1F, 0xC0, 0xFC, 0x0C, 0x0C, 0x3F, 0xE3, 0x83, 0x07, 0xC0, 0x00, 0x00, 0x00,
0x78, 0x1F, 0xE0, 0xFF, 0x0C, 0x0C, 0x3F, 0xE3, 0x83, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x6C, 0x18,
0x30, 0xC1, 0x8C, 0x0C, 0x06, 0x03, 0xC3, 0x18, 0x30, 0x00, 0x00, 0x00, 0x4C, 0x18, 0x30, 0xC1,
0xCC, 0x0C, 0x06, 0x03, 0xC3, 0x18, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x18, 0x30, 0xC0, 0xCC, 0x0C,
0x06, 0x03, 0x63, 0x30, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x18, 0x30, 0xC0, 0xCC, 0x0C, 0x06, 0x03,
0x23, 0x30, 0x18, 0x00, 0x00, 0x00, 0x86, 0x1F, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x33, 0x30,
0x18, 0x00, 0x00, 0x01, 0x86, 0x1F, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x13, 0x30, 0x18, 0x00,
0x00, 0x01, 0x86, 0x18, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x1B, 0x30, 0x18, 0x00, 0x00, 0x01,
0xFF, 0x18, 0x60, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x1B, 0x38, 0x18, 0x00, 0x00, 0x03, 0xFF, 0x18,
0x30, 0xC1, 0x86, 0x0C, 0x06, 0x03, 0x0F, 0x18, 0x18, 0x00, 0x00, 0x03, 0x03, 0x18, 0x30, 0xC3,
0x06, 0x0C, 0x06, 0x03, 0x0F, 0x18, 0x30, 0x00, 0x00, 0x03, 0x01, 0x98, 0x30, 0xFE, 0x03, 0xF8,
0x3F, 0xE3, 0x07, 0x0F, 0xE0, 0x00, 0x00, 0x02, 0x01, 0x98, 0x18, 0xF0, 0x01, 0xE0, 0x3F, 0xE3,
0x07, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x17, 0x16, 0x00, 0xD5, 0x25, 0x29, 0x00, 0xE8, 0x3C, 0x43, 0x00, 0xF0, 0x58, 0x60, 0x00
};

//Fonts from Win paint - Stencil (1) + Agency FB (2) - Smart USB Cooler
const unsigned char PROGMEM Cooler [] = {             
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x43,
0xF8, 0x1F, 0xC0, 0x0F, 0x80, 0x7F, 0x38, 0x07, 0x3F, 0x38, 0x00, 0x00, 0x01, 0x83, 0xC1, 0xF8,
0x1F, 0x80, 0x1F, 0x80, 0x3F, 0x3E, 0x07, 0x3F, 0x18, 0x00, 0x00, 0x03, 0x81, 0xC0, 0xFC, 0x1F,
0x80, 0x1F, 0xC0, 0x3F, 0x1F, 0x06, 0x3F, 0x18, 0x00, 0x00, 0x07, 0x80, 0xC0, 0xFC, 0x1F, 0x80,
0x0F, 0xC0, 0x3F, 0x1F, 0x86, 0x3F, 0x18, 0x00, 0x00, 0x07, 0x80, 0x40, 0xFE, 0x1F, 0x80, 0x0F,
0xC0, 0x3F, 0x1F, 0x86, 0x3F, 0x08, 0x00, 0x00, 0x0F, 0xC0, 0x40, 0x7E, 0x1F, 0x80, 0x0F, 0xC0,
0x3F, 0x1F, 0x84, 0x3F, 0x08, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x7E, 0x1F, 0x80, 0x2F, 0xC0, 0x3F,
0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x7F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x1F,
0x00, 0x3F, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x3F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x1E, 0x00,
0x3F, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x3F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x3C, 0x00, 0x3F,
0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0xBF, 0x1F, 0x80, 0xC7, 0xE0, 0x3F, 0x3C, 0x00, 0x3F, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xC0, 0x9F, 0x1F, 0x80, 0x87, 0xF0, 0x3F, 0x1F, 0x00, 0x3F, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xC0, 0x9F, 0x1F, 0x80, 0x87, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00,
0x0C, 0x0F, 0xC0, 0x8F, 0x1F, 0x80, 0xBF, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0C,
0x07, 0xC0, 0x8E, 0x1F, 0x80, 0x03, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x03,
0xC0, 0x8E, 0x1F, 0x81, 0x03, 0xF8, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x80,
0x8E, 0x1F, 0x81, 0x01, 0xF8, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x81, 0xC4,
0x1F, 0x83, 0x01, 0xF8, 0x3F, 0x1F, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x8E, 0x03, 0xE4, 0x7F,
0xC7, 0x83, 0xFC, 0x7F, 0xCF, 0xC0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07,
0xF8, 0x3F, 0xE0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0xFC,
0x3F, 0xF0, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0xFC, 0x3F,
0xF0, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30,
0x03, 0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03,
0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03, 0x03,
0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03, 0x03, 0x80,
0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x06, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00,
0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x30, 0x60, 0x03, 0x00, 0x0F, 0xF8, 0x7F, 0x87,
0x1F, 0xF0, 0xDF, 0x03, 0x03, 0x01, 0x80, 0x3F, 0xC0, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18,
0x30, 0xF7, 0x03, 0x03, 0x00, 0xE0, 0x3F, 0xC0, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30,
0xC7, 0x03, 0x03, 0x00, 0x70, 0x30, 0x60, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC7,
0x03, 0x03, 0x00, 0x38, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC7, 0x03,
0x03, 0x00, 0x0C, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0x03,
0x00, 0x0C, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x1F, 0xE0, 0xC0, 0x03, 0x03, 0x0C,
0x0C, 0x30, 0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x00, 0xC0, 0x03, 0x03, 0x0C, 0x0C,
0x30, 0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x00, 0xC0, 0x03, 0x03, 0x0C, 0x0C, 0x30,
0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30,
0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0xFF, 0x0F, 0xFC, 0x3F, 0xF0, 0x03,
0xFF, 0x8F, 0xF8, 0x7F, 0xC7, 0x1F, 0xF0, 0xC0, 0x03, 0xFF, 0x0F, 0xFC, 0x3F, 0xF0, 0x03, 0xFF,
0x0F, 0xF8, 0x7F, 0x87, 0x1F, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// font - agency FB - Be cool... Stay cool
const unsigned char PROGMEM Yay [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x18, 0x3F, 0xC0, 0x1F, 0xE1, 0xFE, 0x1F, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xF0, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xF0, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x08, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0xC0, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x3F, 0xC0, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x8C, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x3F, 0xC0, 0x1F, 0xE1, 0xFE, 0x1F, 0xE3, 0x8C, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x02, 0x00,
0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x03, 0x00,
0x00, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x01, 0x00,
0x00, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x01, 0x80,
0x00, 0x1C, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0x01, 0x80,
0x00, 0x1C, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0x00, 0x80,
0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x07, 0x00, 0xF8, 0x7F, 0x18, 0x60, 0x0F, 0xF0, 0xFE, 0x1F, 0xE1, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x01, 0x80, 0x60, 0xE3, 0x88, 0x60, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xC0,
0x00, 0x00, 0xC0, 0x60, 0xE3, 0x88, 0x60, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xC0,
0x00, 0x00, 0x60, 0x60, 0x03, 0x8C, 0x40, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xE0,
0x00, 0x00, 0x30, 0x60, 0x03, 0x8C, 0xC0, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xE0,
0x00, 0x00, 0x18, 0x60, 0x7F, 0x84, 0xC0, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x87, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1F, 0xF8, 0x60, 0xC3, 0x83, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x8E, 0x00, 0xC1, 0x80,
0x00, 0x0F, 0xF8, 0x78, 0xFF, 0x83, 0x00, 0x0F, 0xF0, 0xFE, 0x1F, 0xE1, 0x8E, 0x00, 0xC1, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
   
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x32)
  display.clearDisplay ();
  
  pinMode(button, INPUT);
  pinMode(LED_BUILTIN, OUTPUT);
    
// pinMode(A0, INPUT); // Use A0 to measure the temperature sensor's output

  pinMode(encA, INPUT);  //выводы энкодера
  pinMode(encB, INPUT);
   
  pinMode(cool, INPUT);  //выводы светодиодов и дискретного охл
  pinMode(hot, INPUT);                
 
}

void loop() {

  while (millis () == 50) {
                                                  //Welcome-load page with intro from arduino, project name and phrase      
  display.drawBitmap(8, 0, Arduino, 112, 64, WHITE); //work only on this resolution, do not change
  display.display();
  }

  while (millis () == 800) {
  display.clearDisplay ();
  display.drawBitmap(5, 0, Cooler, 120, 64, WHITE);  //work only on this resolution, do not change
  display.display();      
  }

  while (millis () == 1500) {
  display.clearDisplay ();
  display.drawBitmap(5, 7, Yay, 128, 60, WHITE);   //work only on this resolution, do not change
  display.display();
                //end of welcome page, 3 pages, 0,7sec for each  
  }

  while (millis () == 2200) {
  page = 1;
  }

  readings = 0; // Reset the analog readings to 0
      
      for (int i = 0; i < measurements; i++ )  {      // Make multiple measurements to take average from, avoiding large fluctuations
      readings += analogRead(A0);                      // Read the temperature sensor's output
      }
      
      if (b != 1) {                    //задержка вместо функции дилэй, чтобы на табло цифры не прыгали
      temp = millis ();
      temperature = (((((readings/measurements) * 5.0)/1024) - 0.5) * 100); // Convert the average voltage output to degrees Celsius
      b = 1;
      }
      else if ((millis () - temp) >= 500) {
      b = 0;
      }
                                                                                //расчет температуры не дергать местами в проге - он работает всегда!
// entering setup menu by clicking button for more than 2,5 sec.

  if ((digitalRead(button) == LOW) && (setMenu == 0)) {                                 //вход в настройки при удержании кнопки в течении 2,5сек
  stateOn = millis ();
     while (((stateOn - stateOff) >= 2500) && (digitalRead(button) == LOW)) {
     setMenu = 1; 
     page = 2; 
     }
  }
  else {
  stateOff = millis ();
  }

  
   
// exiting setup menu by clicking button for more than 2,5 sec

  if((setMenu == 1) && (page <= 6) && (a != 1)) {     //задержка 800мс при нажатии кнопок в меню - чтобы мгновенно в конец меню не улетать!
  stateBut1 = millis ();
      if ((digitalRead(button) == LOW) && (setMenu == 1)) {
          page++;
          a = 1; 
     }
  }
  else if ((millis () - stateBut1) >= 800) {
  a = 0;  
  }
// конец задержки нажатии кнопок в меню настройки


  if ((digitalRead(encA) == LOW) && (digitalRead(encB) == LOW) && (setMenu == 0)) {   //если покрутить энкодер - зайдем в настройки
  page = 20;
  Enc = millis (); 
  }
    
  if (((millis () - Enc) >= 3000) && (setMenu == 0)) {                                //3 сек - если не нажимать кнопку или крутить энкодер - возвращение
  page = 1;
  }

  if ((digitalRead(button) == LOW) && (setMenu == 0)) {                               //если нажмем кнопку - зайдем посмотреть настроенную температуру
  page = 21;
  Enc = millis ();   
  }

  if ((temperature >= set) && (setMenu == 0) && (coolStop == 0)) {                                       //при температуре выше настройки и не нахождении в меню настроек - показать сообщение о вкл вентилятора
  page = 10;
  }
  
  if ((temperature >= set) && (coolStop == 0 )) {                                                           //при высокой температуре - вкл охл  
  coolState = 1;
  digitalWrite(hot, HIGH);
  digitalWrite(cool, LOW);
  }
  
  if ((temperature < set) && (coolStop == 0)) {                                                       //при темп. ниже установленной - выкл охл    
  coolState = 0;
  coolBegin = millis ();
  digitalWrite(hot, LOW);
  digitalWrite(cool, HIGH);
  }

  if ((millis () - coolBegin) >= 20000) {                                                               //проверка условия слишком длительной работы кулера - если включен больше 10 мин - стоп и ошибка
  digitalWrite(LED_BUILTIN, HIGH); //for visual information - input a builtin led in cycle
  coolStop = 1;
  coolState = 1;
  page = 11;
  set = 50.0;
  }

switch (page) {

    case 1:{     //Design of main page
      display.clearDisplay(); // Clear the display
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.print("Current t");
      display.println((char)247);// Append the unit
      display.setTextColor(WHITE);
      display.setCursor(11,27);
      display.setTextSize(3); // Set the text size
      display.print(temperature,1); // Print temperature with single decimal
      display.print((char)247);// Append the unit
      display.println("C");
      display.setTextColor(WHITE);
      display.display(); // Display the temperature and unit on the display
      }
    break;  
      
    case 2:{     //Design of page 2
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Language");
      display.display();
      }
    break;

    case 3: { //Design of page 3 
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Setting    value");
      display.display();
      }
    break;

    case 4: {   //Design of page 4
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("LED light");
      display.display();
      }
    break;

    case 5: {   //Design of page 4
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Loudness");
      display.display();
      }
    break;
    
    case 6: {   //Design of page 4
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("BlueTooth");
      display.display();
      }
    break;

    case 7: {
    page = 1;
    setMenu = 0; 
    }
    break;
  
    case 10: {   //Design of page 5
      
      if (((millis () - pageCoolSt2) >= 1000)&&(pageCool != 1)) {
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Cooling...");
      display.setCursor(0,30); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Please");
      display.setCursor(0,45); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("    wait!");
      display.display();  
      pageCool = 1;
      pageCoolSt = millis ();
      }

      if (((millis () - pageCoolSt) >= 1000) && (pageCool == 1)) {
      display.clearDisplay(); // Clear the display
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.print("Current t");
      display.println((char)247);// Append the unit
      display.setTextColor(WHITE);
      display.setCursor(11,27);
      display.setTextSize(3); // Set the text size
      display.print(temperature,1); // Print temperature with single decimal
      display.print((char)247);// Append the unit
      display.println("C");
      display.setTextColor(WHITE);
      display.display(); // Display the temperature and unit on the display
      pageCool = 0;
      pageCoolSt2 = millis ();
        }
     }
     break;

   case 11: {
      if (((millis () - pageCoolSt2) >= 1000)&&(pageCool != 1)) {
      display.clearDisplay ();
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Error...");
      display.setCursor(0,30); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("Please");
      display.setCursor(0,45); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.setTextColor(WHITE);
      display.println("    wait!");
      display.display();  
      pageCool = 1;
      pageCoolSt = millis ();
        }

      if (((millis () - pageCoolSt) >= 1000) && (pageCool == 1)) {
      display.clearDisplay(); // Clear the display
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.print("Reset      current");
      display.setTextColor(WHITE);
      display.setCursor(0,33);
      display.setTextSize(2); // Set the text size
      display.print("setUP       setting");
      display.setTextColor(WHITE);
      display.display(); // Display the temperature and unit on the display
      pageCool = 0;
      pageCoolSt2 = millis ();
        }
      digitalWrite(LED_BUILTIN, LOW);   
     }
     break;
   
   case 20: {  
      //начало программы энкодера

   if ((digitalRead(encA) == LOW) && (digitalRead(encB) == HIGH) && (comb1 != 1)) {      //проверяет - какой из пинов первый начал движение - для часовой стрелки
    state1 = millis ();
    comb1 = 1;                                                                      //блокируем взятие дальше множества состояний при достижении нужного
    cond = 0;
    }
    else if ((digitalRead(encA) == HIGH) && (digitalRead(encB) == LOW) && (comb2 != 1)) {   //проверяет вращение против часовой
    state2 = millis ();
    comb2 = 1;
    cond = 0;
    }                                                                             //разница между движением по часовой или против - какая комбинация появиться первой
                                                                                  //  А 1 0  .Если по часовой - то 1 0 а потом 0 1 у АВ, если против то вначале  0 1 а потом 1 0 у АВ
                                                                                  //  В 0 1  .
    if ((digitalRead(encA) == LOW) && (digitalRead(encB) == LOW)) { //сбрасываем блокировку считывания состояния комбинаций - чтобы они не внесли погрешность
    comb1 = 0;
    comb2 = 0;
      if ((state1 > state2) && (cond != 1)) { //проверяем - какая из комбинаций была первой - а отсюда и движение - либо против часовой либо по
          if (set <= 69.5) {
          set = (set + 0.5);
          }
      cond = 1;                              //блокиратор многоразового плюсования аргумента - один раз прибавили или отняли и все!!
      display.clearDisplay(); // Clear the display
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.print("SetUp t");
      display.println((char)247);// Append the unit
      display.setTextColor(WHITE);
      display.setCursor(11,27); // Set the cursor at the beginning of the display
      display.setTextSize(3); // Set the text size
      display.print(set,1);
      display.print((char)247);// Append the unit
      display.println("C");
      display.setTextColor(WHITE); 
      display.display();
      }
      else if ((state2 > state1)&& (cond != 1)) { //проверяем обратную первой комбинацию и выводим на порт значение
          if (set >= 20.5) {
          set = (set - 0.5);
          }
      cond = 1;
      display.clearDisplay(); // Clear the display
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.print("SetUp t");
      display.println((char)247);// Append the unit
      display.setTextColor(WHITE);
      display.setCursor(11,27); // Set the cursor at the beginning of the display
      display.setTextSize(3); // Set the text size
      display.print(set,1);
      display.print((char)247);// Append the unit
      display.println("C");
      display.setTextColor(WHITE); 
      display.display();
          }
        }
      }             //конец программы энкодера
     break; 
     
      case 21: {
      display.clearDisplay(); // Clear the display
      display.setCursor(0,0); // Set the cursor at the beginning of the display
      display.setTextSize(2); // Set the text size
      display.print("SetUp t");
      display.println((char)247);// Append the unit
      display.setTextColor(WHITE);
      display.setCursor(11,27); // Set the cursor at the beginning of the display
      display.setTextSize(3); // Set the text size
      display.print(set,1);
      display.print((char)247);// Append the unit
      display.println("C");
      display.setTextColor(WHITE); 
      display.display();  
      }
     break;                       
    }           //switch end

}
  
