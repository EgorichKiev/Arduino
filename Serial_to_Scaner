int SCAN_ENTER = 0x5a; 
int SCAN_BREAK = 0xf0;
bool breakActive = 0;
                                                                                // But at the moment we are only interested in receiving   
int clockValue = 0; 
byte dataValue;
byte scanCodes[10] = {0x45,0x16,0x1e,0x26,0x25,0x2e,0x36,0x3d,0x3e,0x46}; 
char characters[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
char buffer[25] = {};                                                           // This saves the characters (for now only numbers) 
int bufferPos = 0; 


void setup() {
  pinMode(3, INPUT);                   //dataPin = 3;                                       
  pinMode(2, INPUT);                 //clockPin = 2;                             
  Serial.begin(9600);                                                    
}

void loop() {
  dataValue = dataRead();                                                
                                                                                             
  if (dataValue == SCAN_BREAK) {                                     // If there is a break code, skip the next byte     
    breakActive = 1;                                                     
  } 
                                                                                                      
 for (word i = 0; i < 10; i++) {                           // Translate the scan codes to numbers    
    byte temp = scanCodes[i];                                            
    if(temp == dataValue){                                           // If there is a match, store it to the buffer      
      if(!breakActive == 1){                                             
        buffer[bufferPos] = characters[i];                               
        bufferPos++;                                                     
      }                                                                  
    }                                                                    
  }                                                                      
                                                  
 if(dataValue == SCAN_ENTER){                                        // Print the buffer if SCAN_ENTER is pressed.     
    int i=0;                                                          // Read the buffer      
      while(buffer[i] != 0) {                                            
        Serial.print( buffer[i] );                                       
        i++;                                                             
    }                                                                    
  bufferPos = 0;                                                       
  Serial.println();       
  }                                                                      
                                                                     // Reset the SCAN_BREAK state if the byte was a normal one             
  if(dataValue != SCAN_BREAK){                                           
    breakActive = 0; 
  }                                                                      
  dataValue = 0;   
                                                  
}

int dataRead() {
  byte val = 0;                                                          
                                                                      // Skip start state and start bit                                      
  while (digitalRead(2));                                   // Wait for LOW.                       
                                                                      // clock is high when idle                                             
  while (!digitalRead(2));                                // Wait for HIGH.                      
  while (digitalRead(2));                                  // Wait for LOW.                       
  for (int offset = 0; offset < 8; offset++) {                           
    while (digitalRead(2));                                 // Wait for LOW               
    val |= digitalRead(3) << offset;                        // Add to byte                
    while (!digitalRead(2));                                  // Wait for HIGH              
  }                                                                      
                                                                                              
  while (digitalRead(2));           // Wait for LOW.              // Skipping parity and stop bits down here.    
  while (!digitalRead(2));          // Wait for HIGH.             
  while (digitalRead(2));           // Wait for LOW.              
  while (!digitalRead(2));          // Wait for HIGH.             
  return val;                                                            
}
