#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 5 //reset pin from oled to arduino, other - (2,3)
Adafruit_SSD1306 display(OLED_RESET);

#define button 4   // кнопка энкодера
#define cool 7    //выход состояния охлаждения - подсветка при холодном напитке
#define hot 8    //выход - вкл при горячем напитке 
#define PWMout 9  //выход регулирования вращения кулера

#define encA 15 //вывод энкодера
#define encB 16 //вывод энкодера
#define modeIn 14 //вход индикатора режима

//Arduino - Oled
// D2     - D1
// D3     - D0
// D5     - Res
// D15    - EncA
// D16    - EncB
// D4     - EncButton
// A0     - TMP36

// D7     - cold 
// D8     - hot
// D9     - CoolerPWM
// D14    - WorkMode of cooler - charger or cooler

bool setMenu = 0;

float set = 50.0;

float temperature = 0;
float voltage = 0;
float percent = 0;

uint32_t state1;
uint32_t state2;
uint32_t Enc;
uint8_t Enc1;

uint8_t coolState = 0;
uint32_t tempRise = 0;
float tempRise2 = 0;
uint32_t tempRise3 = 0;

uint32_t pageCoolSt;
uint32_t pageCoolSt2;
uint32_t pageCoolSt3;
bool pageCool2;
bool pageCool3;

bool cooling = 0;

uint32_t coolBegin = 0;
bool coolStop = 0;
bool pageCool = 0; 

uint8_t page = 0; //page switch function

uint32_t stateOn = 0;
uint32_t stateOff = 0;
uint32_t stateBut1 = 0;
bool a = 0;
bool c = 0;

uint8_t times = 0;
uint32_t z;
uint32_t z2;  

//Arduino logo, created in with paint in black-white, sized in paint.net, converted in lcdassistant - gorizontal
//orientation and maximum size 128x64 - Arduino
const unsigned char PROGMEM Arduino [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
0xFE, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0xFF,
0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xFE, 0x07, 0xFF, 0xC0, 0x01, 0xFF, 0xF0, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xE0, 0x00, 0x7F, 0xE0, 0x03, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80,
0x00, 0x1F, 0xF0, 0x07, 0xFE, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x0F,
0xF8, 0x0F, 0xF8, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x07, 0xFC, 0x0F,
0xF0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE0, 0x00,
0x00, 0x0F, 0xE0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x01, 0xFE, 0x3F, 0xC0, 0x00, 0x00, 0x0F,
0xE0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x80, 0x00, 0x00, 0x07, 0xF0, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07,
0xF0, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x1F, 0xFE, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00,
0x1F, 0xFC, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xF8,
0x00, 0x7F, 0xF0, 0x01, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x1F, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x7F,
0xF0, 0x01, 0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x1F, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x7F, 0xF0, 0x01,
0xF8, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x7F, 0xF0, 0x01, 0xF8, 0x00,
0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x07, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x07,
0xE0, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x3F, 0xFE, 0x00, 0x07, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00,
0x3F, 0xFF, 0x00, 0x07, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0xFF,
0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x80, 0x00,
0x00, 0x07, 0xF0, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0xFE, 0x3F, 0xC0, 0x00, 0x00, 0x0F,
0xE0, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x01, 0xFC, 0x1F, 0xE0, 0x00, 0x00, 0x0F, 0xE0, 0x00,
0x00, 0x01, 0xFE, 0x00, 0x00, 0x03, 0xFC, 0x0F, 0xF0, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xF8, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x80,
0x00, 0x1F, 0xF0, 0x07, 0xFC, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x7F,
0xE0, 0x03, 0xFF, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x03, 0xFF, 0xC0, 0x01,
0xFF, 0xE0, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF,
0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x38, 0x1F, 0xC0, 0xFC, 0x0C, 0x0C, 0x3F, 0xE3, 0x83, 0x07, 0xC0, 0x00, 0x00, 0x00,
0x78, 0x1F, 0xE0, 0xFF, 0x0C, 0x0C, 0x3F, 0xE3, 0x83, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x6C, 0x18,
0x30, 0xC1, 0x8C, 0x0C, 0x06, 0x03, 0xC3, 0x18, 0x30, 0x00, 0x00, 0x00, 0x4C, 0x18, 0x30, 0xC1,
0xCC, 0x0C, 0x06, 0x03, 0xC3, 0x18, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x18, 0x30, 0xC0, 0xCC, 0x0C,
0x06, 0x03, 0x63, 0x30, 0x18, 0x00, 0x00, 0x00, 0xCC, 0x18, 0x30, 0xC0, 0xCC, 0x0C, 0x06, 0x03,
0x23, 0x30, 0x18, 0x00, 0x00, 0x00, 0x86, 0x1F, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x33, 0x30,
0x18, 0x00, 0x00, 0x01, 0x86, 0x1F, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x13, 0x30, 0x18, 0x00,
0x00, 0x01, 0x86, 0x18, 0xC0, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x1B, 0x30, 0x18, 0x00, 0x00, 0x01,
0xFF, 0x18, 0x60, 0xC0, 0xCC, 0x0C, 0x06, 0x03, 0x1B, 0x38, 0x18, 0x00, 0x00, 0x03, 0xFF, 0x18,
0x30, 0xC1, 0x86, 0x0C, 0x06, 0x03, 0x0F, 0x18, 0x18, 0x00, 0x00, 0x03, 0x03, 0x18, 0x30, 0xC3,
0x06, 0x0C, 0x06, 0x03, 0x0F, 0x18, 0x30, 0x00, 0x00, 0x03, 0x01, 0x98, 0x30, 0xFE, 0x03, 0xF8,
0x3F, 0xE3, 0x07, 0x0F, 0xE0, 0x00, 0x00, 0x02, 0x01, 0x98, 0x18, 0xF0, 0x01, 0xE0, 0x3F, 0xE3,
0x07, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x17, 0x16, 0x00, 0xD5, 0x25, 0x29, 0x00, 0xE8, 0x3C, 0x43, 0x00, 0xF0, 0x58, 0x60, 0x00
};

//Fonts from Win paint - Stencil (1) + Agency FB (2) - Smart USB Cooler
const unsigned char PROGMEM Cooler [] = {             
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x43,
0xF8, 0x1F, 0xC0, 0x0F, 0x80, 0x7F, 0x38, 0x07, 0x3F, 0x38, 0x00, 0x00, 0x01, 0x83, 0xC1, 0xF8,
0x1F, 0x80, 0x1F, 0x80, 0x3F, 0x3E, 0x07, 0x3F, 0x18, 0x00, 0x00, 0x03, 0x81, 0xC0, 0xFC, 0x1F,
0x80, 0x1F, 0xC0, 0x3F, 0x1F, 0x06, 0x3F, 0x18, 0x00, 0x00, 0x07, 0x80, 0xC0, 0xFC, 0x1F, 0x80,
0x0F, 0xC0, 0x3F, 0x1F, 0x86, 0x3F, 0x18, 0x00, 0x00, 0x07, 0x80, 0x40, 0xFE, 0x1F, 0x80, 0x0F,
0xC0, 0x3F, 0x1F, 0x86, 0x3F, 0x08, 0x00, 0x00, 0x0F, 0xC0, 0x40, 0x7E, 0x1F, 0x80, 0x0F, 0xC0,
0x3F, 0x1F, 0x84, 0x3F, 0x08, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x7E, 0x1F, 0x80, 0x2F, 0xC0, 0x3F,
0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x7F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x1F,
0x00, 0x3F, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x3F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x1E, 0x00,
0x3F, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x3F, 0x9F, 0x80, 0x47, 0xE0, 0x3F, 0x3C, 0x00, 0x3F,
0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0xBF, 0x1F, 0x80, 0xC7, 0xE0, 0x3F, 0x3C, 0x00, 0x3F, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xC0, 0x9F, 0x1F, 0x80, 0x87, 0xF0, 0x3F, 0x1F, 0x00, 0x3F, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xC0, 0x9F, 0x1F, 0x80, 0x87, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00,
0x0C, 0x0F, 0xC0, 0x8F, 0x1F, 0x80, 0xBF, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0C,
0x07, 0xC0, 0x8E, 0x1F, 0x80, 0x03, 0xF0, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0C, 0x03,
0xC0, 0x8E, 0x1F, 0x81, 0x03, 0xF8, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x80,
0x8E, 0x1F, 0x81, 0x01, 0xF8, 0x3F, 0x1F, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x81, 0xC4,
0x1F, 0x83, 0x01, 0xF8, 0x3F, 0x1F, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x8E, 0x03, 0xE4, 0x7F,
0xC7, 0x83, 0xFC, 0x7F, 0xCF, 0xC0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07,
0xF8, 0x3F, 0xE0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0xFC,
0x3F, 0xF0, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0xFC, 0x3F,
0xF0, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30,
0x03, 0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03,
0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03, 0x03,
0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x03, 0x03, 0x80,
0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x06, 0x00, 0x30, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00,
0x07, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x30, 0x60, 0x03, 0x00, 0x0F, 0xF8, 0x7F, 0x87,
0x1F, 0xF0, 0xDF, 0x03, 0x03, 0x01, 0x80, 0x3F, 0xC0, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18,
0x30, 0xF7, 0x03, 0x03, 0x00, 0xE0, 0x3F, 0xC0, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30,
0xC7, 0x03, 0x03, 0x00, 0x70, 0x30, 0x60, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC7,
0x03, 0x03, 0x00, 0x38, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC7, 0x03,
0x03, 0x00, 0x0C, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0x03,
0x00, 0x0C, 0x30, 0x30, 0x03, 0x00, 0x0E, 0x18, 0x61, 0xC7, 0x1F, 0xE0, 0xC0, 0x03, 0x03, 0x0C,
0x0C, 0x30, 0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x00, 0xC0, 0x03, 0x03, 0x0C, 0x0C,
0x30, 0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x00, 0xC0, 0x03, 0x03, 0x0C, 0x0C, 0x30,
0x30, 0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30,
0x03, 0x03, 0x8E, 0x18, 0x61, 0xC7, 0x18, 0x30, 0xC0, 0x03, 0xFF, 0x0F, 0xFC, 0x3F, 0xF0, 0x03,
0xFF, 0x8F, 0xF8, 0x7F, 0xC7, 0x1F, 0xF0, 0xC0, 0x03, 0xFF, 0x0F, 0xFC, 0x3F, 0xF0, 0x03, 0xFF,
0x0F, 0xF8, 0x7F, 0x87, 0x1F, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// font - agency FB - Be cool... Stay cool
const unsigned char PROGMEM Yay [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x18, 0x3F, 0xC0, 0x1F, 0xE1, 0xFE, 0x1F, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xF0, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xF0, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x08, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0xC0, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x3F, 0xC0, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x01, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0x00, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0x0C, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x30, 0xC0, 0x18, 0x71, 0x86, 0x18, 0x63, 0x8C, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x3F, 0xC0, 0x1F, 0xE1, 0xFE, 0x1F, 0xE3, 0x8C, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x02, 0x00,
0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x03, 0x00,
0x00, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x01, 0x00,
0x00, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x00, 0x01, 0x80,
0x00, 0x1C, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0x01, 0x80,
0x00, 0x1C, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0x00, 0x80,
0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x07, 0x00, 0xF8, 0x7F, 0x18, 0x60, 0x0F, 0xF0, 0xFE, 0x1F, 0xE1, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x01, 0x80, 0x60, 0xE3, 0x88, 0x60, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xC0,
0x00, 0x00, 0xC0, 0x60, 0xE3, 0x88, 0x60, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xC0,
0x00, 0x00, 0x60, 0x60, 0x03, 0x8C, 0x40, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x84, 0x00, 0xC0, 0xE0,
0x00, 0x00, 0x30, 0x60, 0x03, 0x8C, 0xC0, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xE0,
0x00, 0x00, 0x18, 0x60, 0x7F, 0x84, 0xC0, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x84, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x01, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x84, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1C, 0x18, 0x60, 0xC3, 0x87, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x80, 0x00, 0x00, 0xC0,
0x00, 0x1F, 0xF8, 0x60, 0xC3, 0x83, 0x80, 0x0C, 0x31, 0x87, 0x18, 0x61, 0x8E, 0x00, 0xC1, 0x80,
0x00, 0x0F, 0xF8, 0x78, 0xFF, 0x83, 0x00, 0x0F, 0xF0, 0xFE, 0x1F, 0xE1, 0x8E, 0x00, 0xC1, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
   
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x32)
  display.clearDisplay();
  
    
  pinMode(button, INPUT);
  pinMode(A0, INPUT); // Use A0 to measure the temperature sensor's output
  pinMode(encA, INPUT);  //выводы энкодера
  pinMode(encB, INPUT);
   
  pinMode(cool, OUTPUT);  //выводы светодиодов и дискретного охл
  pinMode(hot, OUTPUT);
  pinMode(PWMout, OUTPUT);
 
  pinMode(modeIn, INPUT); //индикатор включенного режима - если высокий уровень - то охладитель
}

void loop() {
 
while (millis () < 2200) {
welcomePage ();  
}

while (millis () == 2200) {
voltageMeasureDisplay ();
}

while (millis () == 3900) {
chargeLeft ();  
}
                                                                        
while (millis () == 5200) {
page = 1;
}
    
temperatureCycle ();

switch (coolState) {                    //проверка - начальная точка включения - поставили ли на охл что-то горячее - если да - предварительно вкл охладитель до
  case 0: {
    tempRise = millis ();                       //достижения условия - заданная темп < измеренной и точной необх вкл вентилятора
    tempRise2 = temperature;
    coolState = 1;  
    }
    break;
  case 1: {
    if ((millis () - tempRise) >= 15000)  {              //крутая температуры - за 15с более 5 градусов - значит что-то горячее и нужно вкл охл
      if ((temperature - tempRise2) >= 5.0) {
        tempRise3 = millis ();
        digitalWrite(hot, 1);
        digitalWrite(cool, 0);
        coolState = 2;
        }
      }
    }
    break;
  case 2: {
    if ((millis () - tempRise3) >= 30000) {               //если через 30 сек не достигнуто условие - t уст.< t изм. то выкл вентилятор - фальшстарт
      if (temperature < set) {
        digitalWrite(hot, 0);
        digitalWrite(cool, 1);
        coolState = 3;
        }
      }  
    }
    break;
}  
    
if (!setMenu) {                                  
  if (!digitalRead(button)) {
    stateOn = (millis () - stateOff);
    switch (stateOn) {
       case 0 ... 1900: {
            (cooling) ? page : page = 21;
            Enc = millis ();     
            Enc1 = 1;   
            }
            break;
       case 2000 ... 3000: {
            setMenu = 1; 
            page = 2;
            c = 1;  
            }
            break;
       }
     } else {
          stateOff = millis ();
          }
            
  if (!coolStop) {    //глобальное уловие - если не имело место в процессе слишком долгая работа кулера - то возможно продолжение программы в норм.режиме
    if (temperature < (set - 3.0)) {     //при темп. ниже установленной - выкл охл
      if (cooling) {
         digitalWrite(hot, 0);
         digitalWrite(cool, 1);
         cooling = 0;
         }
      coolBegin = millis ();
    }
    if ((temperature >= set) && !cooling) {
      page = 10; 
      digitalWrite(hot, 1);
      digitalWrite(cool, 0);
      cooling = 1;
    }
    if ((millis () - coolBegin) >= 40000) {     //проверка условия слишком длительной работы кулера - если включен больше 1,5 мин - стоп и ошибка
      coolStop = 1;
      page = 11;
      set = 50.0;
    }

    if (!digitalRead(encA) && !digitalRead(encB) && !cooling) {   //если покрутить энкодер - зайдем в настройки
      page = 20;
      Enc = millis (); 
      Enc1 = 1;
    }
                  
    if (((millis () - Enc) >= 3000) && Enc1 && !cooling) {      //3 сек - если нет активности - не нажимать кнопку или крутить энкодер - возвращение
       page = 1;
       Enc1 = 0;
    }
  }
}  else  {
  if (page <= 6 && !a && !c) {     //задержка 800мс при нажатии кнопок в меню - чтобы мгновенно в конец меню не улетать!
     stateBut1 = millis ();
        if (!digitalRead(button)) {
           page++;
           a = 1; 
        }
   }
   (digitalRead(button)) ? c = 0 : c ;
   (millis () - stateBut1) > 800 ? a = 0 : a = 1 ;   // конец задержки нажатии кнопок в меню настройки
} 

switch (page) {

    case 1:{     
      display.clearDisplay(); 
      printDisplay (0,0,2, F("Current t"));
      display.println((char)247);
      display.setCursor(11,27);
      display.setTextColor(WHITE);
      display.setTextSize(3); 
      display.print(temperature,1); // Print temperature with single decimal
      display.print((char)247);
      display.println(F("C"));
      display.display(); // Display the temperature and unit on the display
      }
    break;  
      
    case 2:{   
      display.clearDisplay ();
      printDisplay (0,0,2, F("Language"));
      display.display();
      }
    break;

    case 3: { 
      display.clearDisplay ();
      printDisplay (0,0,2, F("Setting    value"));
      display.display();
      }
    break;

    case 4: {   
      display.clearDisplay ();
      printDisplay (0,0,2, F("LED Light"));
      display.display();
      }
    break;

    case 5: {   
      display.clearDisplay ();
      printDisplay (0,0,2, F("Loudness"));
      display.display();
      }
    break;
    
    case 6: {   
      display.clearDisplay ();
      printDisplay (0,0,2, F("BlueTooth"));
      display.display();
      }
    break;

    case 7: {
      page = 1;
      setMenu = 0; 
      }
    break;
  
    case 10: {
      switchPage ();
      if (times == 1) {
      display.clearDisplay ();
      printDisplay (0,0,2, F("Cooling..."));
      printDisplay (0,30,2, F("Please"));
      printDisplay (0,45,2, F("    wait"));
      display.display();  
      } 
      if (times == 3){
      display.clearDisplay();
      printDisplay (0,0,2, F("Current t"));
      display.println((char)247);
      display.setCursor(11,27);
      display.setTextSize(3); 
      display.setTextColor(WHITE);
      display.print(temperature,1); // Print temperature with single decimal
      display.print((char)247);
      display.println(F("C"));
      display.display();
      }   
      
        
/*      if (((millis () - pageCoolSt2) >= 1000) && !pageCool) {
      display.clearDisplay ();
      printDisplay (0,0,2, F("Cooling..."));
      printDisplay (0,30,2, F("Please"));
      printDisplay (0,45,2, F("    wait"));
      display.display();  
      pageCool = 1;
      pageCoolSt = millis ();
      }

      if (((millis () - pageCoolSt) >= 1000) && pageCool) {
      display.clearDisplay();
      printDisplay (0,0,2, F("Current t"));
      display.println((char)247);
      display.setCursor(11,27);
      display.setTextSize(3); 
      display.setTextColor(WHITE);
      display.print(temperature,1); // Print temperature with single decimal
      display.print((char)247);
      display.println(F("C"));
      display.display(); 
      pageCool = 0;
      pageCoolSt2 = millis ();
      }
*/     }
     break;

   case 11: {
      if (!pageCool) {
        pageCool = 1;
        pageCoolSt = millis ();
      }
    
      if (((millis () - pageCoolSt) >= 2000) && pageCool && !pageCool2 && !pageCool3) {
      display.clearDisplay ();
      printDisplay (0,0,2, F("ERROR..."));
      printDisplay (0,30,2, F("Please"));
      printDisplay (0,45,2, F("    wait"));
      display.display();  
      pageCoolSt2 = millis ();
      pageCool2 = 1;
      }

      if (((millis () - pageCoolSt2) >= 2000) && pageCool && pageCool2 && !pageCool3) {
      display.clearDisplay(); 
      printDisplay (0,0,2, F("Reset      current"));
      printDisplay (0,33,2, F("setUp       settings"));
      display.display(); 
      pageCoolSt3 = millis ();
      pageCool3 = 1;
      }
          
      if (((millis () - pageCoolSt3) >= 2000) && pageCool2 && pageCool && pageCool3) {
          page = 1;
          pageCool = 0;
          pageCool2 = 0;
          pageCool3 = 0;
          coolStop = 0;
          digitalWrite(hot, 0);
          digitalWrite(cool, 1);
          }
     }
     break;
   
   case 20: {   //начало программы энкодера
    bool comb1;
    bool comb2;
    bool cond;
    
    if (!digitalRead(encA) && digitalRead(encB) && !comb1) {      //проверяет - какой из пинов первый начал движение - для часовой стрелки
    state1 = millis ();
    comb1 = 1;                                                                      //блокируем взятие дальше множества состояний при достижении нужного
    cond = 0;
    }
    else if (digitalRead(encA) && !digitalRead(encB) && !comb2) {   //проверяет вращение против часовой
    state2 = millis ();
    comb2 = 1;
    cond = 0;
    }                                                                            //разница между движением по часовой или против - какая комбинация появиться первой
                                                                                 //  А 1 0  .Если по часовой - то 1 0 а потом 0 1 у АВ, если против то вначале  0 1 а потом 1 0 у АВ
                                                                                 //  В 0 1  .
    if (!digitalRead(encA) && !digitalRead(encB)) { //сбрасываем блокировку считывания состояния комбинаций - чтобы они не внесли погрешность
    comb1 = 0;
    comb2 = 0;
    
      if ((state1 > state2) && !cond) { //проверяем - какая из комбинаций была первой - а отсюда и движение - либо против часовой либо по
          if (set <= 69.5) {
          set = (set + 0.5);
          }
      cond = 1;                              //блокиратор многоразового плюсования аргумента - один раз прибавили или отняли и все!!
      showSetUpTemp ();
      }
      else if ((state2 > state1)&& !cond) { //проверяем обратную первой комбинацию и выводим на порт значение
          if (set >= 20.5) {
          set = (set - 0.5);
          }
      cond = 1;
      showSetUpTemp ();
          }
        }
      }             //конец программы энкодера
     break; 
     
   case 21: {       //когда нажмем на кнопку - увидим установленную темп.
      showSetUpTemp ();
      }
     break;                       
    }           //switch end
   
}    //конец петли цикла

void welcomePage () {
  while (millis () == 50) {
  display.drawBitmap(8, 0, Arduino, 112, 64, WHITE); //work only on this resolution, do not change
  display.display();
  }
  while (millis () == 800) {
  display.clearDisplay ();
  display.drawBitmap(5, 0, Cooler, 120, 64, WHITE);  //work only on this resolution, do not change
  display.display();      
  }
  while (millis () == 1500) {
  display.clearDisplay ();
  display.drawBitmap(5, 7, Yay, 128, 60, WHITE);   //work only on this resolution, do not change
  display.display();
  } 
}

void voltageMeasureDisplay () {
  // Read 1.1V reference against AVcc
  // set the reference to Vcc and the measurement to the internal 1.1V reference
  ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  
  delay(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
  while (bit_is_set(ADCSRA,ADSC)); // measuring

  
  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH  
  uint8_t high = ADCH; // unlocks both

  int16_t voltCalc = (high<<8) | low;

  voltCalc = 1125300L / voltCalc; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
  voltage = float(voltCalc)/1000;

switch (voltCalc) {
  case 2200 ... 3400 : {
  percent = 0.0;  
  }
  break;
  case 3410 ... 3530 : {
  percent = map (voltCalc, 3410, 3530, 1, 5);
  }
  break;
  case 3531 ... 3580 : {
  percent = map (voltCalc, 3531, 3580, 5.1, 10); 
  }
  break;
  case 3581 ... 3620 : {
  percent = map (voltCalc, 3581, 3.620, 10.1, 20); 
  }
  break;
  case 3621 ... 3680 : {
  percent = map (voltCalc, 3621, 3680, 20.1, 30); 
  }
  break;
  case 3681 ... 3710 : {
  percent = map (voltCalc, 3681, 3710, 30.1, 40); 
  }
  break;
  case 3711 ... 3750 : {
  percent = map (voltCalc, 3711, 3750, 40.1, 50); 
  }
  break;
  case 3751 ... 3850 : {
  percent = map (voltCalc, 3751, 3850, 50.1, 60); 
  }
  break;
  case 3851 ... 3950 : {
  percent = map (voltCalc, 3851, 3950, 60.1, 70); 
  }
  break;
  case 3951 ... 4050 : {
  percent = map (voltCalc, 3951, 4050, 70.1, 80); 
  }
  break;
  case 4051 ... 4150 : {
  percent = map (voltCalc, 4051, 4150, 80.1, 90); 
  }
  break;
  case 4151 ... 4200 : {
  percent = map (voltCalc, 4151, 4020, 90.1, 100); 
  }
  break;
  }
  
  (voltage > 4.2) ? percent = 100.0 : percent ;    //если подключена через юсб - уровень заряда не нужен и равен 100%

     display.clearDisplay(); // Clear the display
     printDisplay (0,0,2, F("BATTERY:"));
     display.setCursor(11,27);
     display.setTextSize(3); // Set the text size
     display.setTextColor(WHITE);
     display.print(voltage,2); // Print temperature with single decimal
     display.println(F("V"));
     display.display(); // Display the temperature and unit on the display
}     

void chargeLeft () {
     display.clearDisplay(); // Clear the display
     printDisplay (0,0,2, F("CHARGE:"));
     display.setCursor(11,30);
     display.setTextSize(3); // Set the text size
     display.setTextColor(WHITE);
     display.print(percent,1); // Print temperature with single decimal
     display.println(F("%"));
     display.display(); // Display the temperature and unit on the display
}

void temperatureCycle () {

    uint32_t temp;
    uint32_t readings = 0; //variables for temperature measurement
    uint8_t measurements = 10;
    bool tempMeasure = 0;
    
    for (uint8_t i = 0; i < measurements; i++ )  {      // Make multiple measurements to take average from, avoiding large fluctuations
    readings += analogRead(A0);                      // Read the temperature sensor's output
    }
  
    if (!tempMeasure) {                                  //задержка при отображении температуры на табло вместо функции delay, чтобы на табло цифры не прыгали
            temp = millis ();
            temperature = (((((readings/measurements) * 5.0)/1024) - 0.5) * 100); // Convert the average voltage output to degrees Celsius
            tempMeasure = 1;
        } 
        else {
            if ((millis () - temp) >= 800) {
                tempMeasure = 0;
                }    
        }
      (voltage > 4.2) ? temperature : temperature -= 20 ;  //если подключен к юсб во время отладки - коррекция температуры  
}

void showSetUpTemp () {
      display.clearDisplay(); 
      printDisplay (0,0,2, F("SetUp t"));
      display.println((char)247);
      display.setCursor(11,27); 
      display.setTextColor(WHITE); 
      display.setTextSize(3); 
      display.print(set,1);
      display.print((char)247);
      display.println(F("C"));
      display.display();
}

void printDisplay (int8_t x, int8_t y, int8_t TS, const __FlashStringHelper *Text) {
display.setTextColor(WHITE);
display.setCursor(x,y); // Set the cursor at the beginning of the display
display.setTextSize(TS); // Set the text size
display.print(Text);  
}

void switchPage () {
switch (times) {
  case 0: {
  z = millis ();
  times = 1;  
  }
  break;
  case 1: {
  if ((millis () - z) >= 1500 ) {
  times = 2; 
  }  
  }
  break;
  case 2: {
  z2 = millis ();
  times = 3;   
  }
  break;
  case 3: {
  if ((millis () - z2) >= 1500 ) {
  times = 4; 
  }  
  }
  break;
  case 4: {
  times = 0;
  z = 0;
  z2 = 0;
  }
  break;
}

}
